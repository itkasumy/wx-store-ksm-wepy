<template>
  <view class="bar">
    <view class="filter">
      <view class="nav {{currentType == 'zonghe' ? 'nav_active' : ''}}" data-current="zonghe" @tap="orderBy">综合</view>
      <view class="nav {{currentType == 'sale' ? 'nav_active' : ''}}" data-current="sale" @tap="orderBy">销量</view>
      <view class="nav grid">
        <view class="price {{currentType == 'price' ? 'nav_active' : ''}}" data-current="price" @tap.stop="orderBy">价格</view>
        <view>
          <view class="arrow_up {{arrowType == 'desc' ? 'arrow_up_red' : 'arrow_up_gray'}}"></view>
          <view class="arrow_down {{arrowType == 'asc' ? 'arrow_down_red' : 'arrow_down_gray'}}"></view>
        </view>
      </view>
      <view class="nav" @tap="filterSearch">筛选<i class="iconfont icon-filter"></i></view>
    </view>

    <filterSlider></filterSlider>
  </view>
</template>

<script>
import wepy from 'wepy'
import FilterSlider from './fiterSlider'

export default class filterBar extends wepy.component {
  data = {
    currentType: '',
    arrowType: '',
    flag: false,
    type: 'desc'
  }

  components = {
    filterSlider: FilterSlider
  }

  methods = {
    filterSearch () {
      this.$invoke('filterSlider', 'swictchOverlay', true)
    },
    orderBy (e) {
      const that = this
      if (that.data.currentType === e.target.dataset.current) {
        if (e.target.dataset.current !== 'price') {
          return false
        }
      } else {
        that.currentType = e.target.dataset.current
      }
      that.priceOrderBy(e.target.dataset.current)
      that.$apply()
    }
  }

  priceOrderBy (orderBy) {
    const that = this
    if (orderBy === 'price') {
      if (that.arrowType === 'desc') {
        that.arrowType = 'asc'
      } else {
        that.arrowType = 'desc'
      }
    } else {
      that.arrowType = ''
    }
  }

  setSkuVal (sku) {
    this.$emit('currentType', {
      name: 'sku',
      type: sku
    })
  }

  watch = {
    currentType (newVal) {
      this.$emit('currentType', {
        name: newVal,
        type: 'desc'
      })
    },
    arrowType (newVal, oldVal) {
      if (oldVal !== '' && newVal !== '') {
        this.$emit('currentType', {
          name: 'price',
          type: newVal
        })
      }
    }
  }

  events = {
    filterSku (sku) {
      // console.log('filterBar.sku...', sku)
      this.setSkuVal(sku)
    }
  }
}
</script>

<style lang="less">
  .filter {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #ffffff;
    .nav {
      color: #000000;
      font-size: 26rpx;
      padding: 12px 20px;
    }
    .nav_active {
      color: #f03939;
    }
    .icon-filter {
      font-size: 26rpx;
      color: #666666;
      margin-left: 5rpx;
    }
  }

  .price {
    color: #000000;
    font-size: 26rpx;
  }
  .grid {
    display: flex;
    align-items: center;
  }

  .arrow_up {
    width: 0;
    height: 0;
    border-width: 0 10rpx 10rpx;
    border-style: solid;
    margin: 9rpx 10rpx;
    position: relative;
  }
  .arrow_down {
    width: 0;
    height: 0;
    border-width: 10rpx 10rpx 0;
    border-style: solid;
    margin: 9rpx 10rpx;
    position: relative;
  }
  .arrow_up_red {
    border-color: transparent transparent #f03939;
  }
  .arrow_down_red {
    border-color: #f03939 transparent transparent;
  }
  .arrow_up_gray {
    border-color: transparent transparent #ccc;
  }
  .arrow_down_gray {
    border-color: #ccc transparent transparent;
  }
</style>
