<template name="cart-goods-list">
  <view class="goodsList">
    <repeat for="{{list}}" key="index" index="index" item="item">
      <view class="list_box">
        <swipeDelete :swipeData="item" @delItem.user="handleDelItem">
          <navigator url="/pages/goods_detail?id={{item.goodsId}}" class="item_content">
            <view class="goods-info">
              <view class="img-box">
                <image class="img" src="{{item.thumLogo}}"></image>
              </view>

              <view class="text-box">
                <view class="goods-title">{{item.name}}</view>
                <view class="goods-price">ï¿¥{{item.price}}</view>
              </view>
            </view>
          </navigator>
        </swipeDelete>
      </view>
    </repeat>
  </view>
</template>

<script>
import wepy from 'wepy'
import tip from '../utils/tip'
import SwipeDelete from './common/wepy-swipe-delete'
import api from '../api'
import { USER_SPECICAL_INFO } from '../utils/constant'

export default class CollectionList extends wepy.component {
  props = {
    type: {
      default: 0
    },
    list: {
      type: Object,
      default: []
    }
  }

  components = {
    swipeDelete: SwipeDelete
  }

  async goodsUnFavorite (goodsId) {
    const userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {}
    const openId = userSpecialInfo.openid
    const json = await api.goodsUnFavorite({
      query: {
        openId: openId,
        goodsId: goodsId
      }
    })

    // console.log(json)

    if (json.data.code === '0') {
      const retList = []
      for (let i = 0; i < this.list.length; i++) {
        if (this.list[i].goodsId === goodsId) {
          continue
        } else {
          retList.push(this.list[i])
        }
      }
      this.list = retList
    } else {
      // tip.error(json.data.msg)
      tip.error('json.data.msg')
    }
    this.$apply()
  }

  async delUserBrowser (goodsId) {
    const userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {}
    const openId = userSpecialInfo.openid
    const json = await api.delUserBrowser({
      query: {
        openId: openId,
        goodsId: goodsId
      }
    })

    // console.log(json)

    if (json.data.code === '0') {
      const retList = []
      for (let i = 0; i < this.list.length; i++) {
        if (this.list[i].goodsId === goodsId) {
          continue
        } else {
          retList.push(this.list[i])
        }
      }
      this.list = retList
    } else {
      // tip.error(json.data.msg)
      tip.error('json.data.msg')
    }
    this.$apply()
  }

  methods = {
    handleDelItem (itemData) {
      const objType = itemData.type
      if (objType === 1) {
        this.delUserBrowser(itemData.goodsId)
      } else if (objType === 2) {
        this.goodsUnFavorite(itemData.goodsId)
      }
    },

    refreshList (val) {
      if (val === undefined) {
        return
      }
      this.list = val
      this.$apply()
    }
  }
}
</script>

<style lang="less">
  .goodsList {
    padding-top: 15rpx;
  }

  .goods-info {
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    padding: 15rpx 21rpx;
    box-sizing: border-box;
    .img-box {
      width: 175rpx;
      height: 175rpx;
      overflow: hidden;
      margin-right: 20rpx;
      background: #d8d8d8;
      .img {
        width: 175rpx;
        height: 175rpx;
      }
    }
    .text-box {
      position: relative;
      width: 440rpx;
      .goods-title {
        font-size: 32rpx;
        color: #414141;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
        padding: 10rpx 20rpx 5rpx 0;
      }
      .goods-price {
        font-size: 30rpx;
        color: #ed601b;
        padding-top: 30rpx;
      }
    }
  }
  
  .list_box {
    height: 200rpx;
  }
</style>
