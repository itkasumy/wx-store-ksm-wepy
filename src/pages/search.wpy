<template>
  <view class="container">
    <search @searchValue.user="doSearch"></search>
    <filterBar wx:if="{{list.length > 0 || skuval !== ''}}" @currentType.user="currentType"></filterBar>

    <view wx:if="{{list.length > 0}}">
      <!-- 矩阵商品列表模块 -->
      <shopGripList :purchasetype.sync="purchasetype" :list.sync="list"></shopGripList>
      <!-- 加载更多时的动画 -->
      <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
      <!-- 暂无数据显示 -->
      <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder>
    </view>

    <view class="history {{show ? '' : 'hidden'}}" wx:else>
      <view class="doc">历史记录</view>
      <view class="lable">
        <view wx:for="{{keywordhisList}}" wx:key="item" @tap.stop="selHisKeyWord" data-id="{{item.id}}">
          <view class="child {{item.sel === '1' ? 'active' : ''}}">{{item.keyword}}</view>
        </view>
      </view>
      <view class="btn_box">
        <view class="button type_empty" @tap.stop="clearHis">清除历史记录</view>
      </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import api from '../api'
import tip from '../utils/tip'
import { USER_SPECICAL_INFO } from '../utils/constant'
import Searchs from '../components/search'
import FilterBar from '../components/filter_bar'
import ShopGripList from '../components/shop_grid_list'
import BottomLoadMore from '../components/common/bottomLoadMore'
import Placeholder from '../components/common/placeholder'
// import FilterSlider from '../components/fiterSlider'

export default class Search extends wepy.page {
  config = {
    navigationBarTitleText: '搜索'
  }
  components = {
    search: Searchs,
    filterBar: FilterBar,
    // filterSlider: FilterSlider,
    shopGripList: ShopGripList,
    bottomLoadMore: BottomLoadMore,
    placeholder: Placeholder
  }

  data = {
    list: [],
    showLoading: false,
    purchasetype: 1,
    is_empty: false,
    is_filter: false,
    currentPage: 1,
    page_total: 0,
    keyword: '',
    keywordhisList: [],
    cateCode: '',
    show: true,
    sort: -1,
    title: '',
    skuval: ''
  }

  async getKeyWordHisList () {
    const userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {}
    const openId = userSpecialInfo.openid
    const json = await api.searchKeywordList({
      query: {
        openId: openId
      }
    })

    // console.log(json)

    if (json.data.code === '0') {
      this.keywordhisList = json.data.list
    }
    this.$apply()
  }

  setTitle (title) {
    wepy.setNavigationBarTitle({
      title: title
    })
  }

  onLoad (option) {
    this.list = []
    this.skuval = ''
    this.cateCode = option.cateCode
    if (this.cateCode !== undefined && this.cateCode.length > 0) {
      this.$invoke('search', 'show', '0')
      this.show = false
      this.doSearchGoods(this.cateCode)
      this.title = '' + option.title
      this.setTitle('' + option.title)
    } else {
      this.$invoke('search', 'show', '1')
      this.show = true
      this.getKeyWordHisList()
    }
  }

  async doSearchGoods (keyword, currentPage, size) {
    const that = this
    const json = await api.getGoodsList({
      query: {
        page: currentPage || 1,
        size: size || 10,
        searchKeyWords: this.keyword,
        cateCode: this.cateCode || '',
        sort: this.sort,
        skuval: this.skuval
      }
    })

    // console.log(json)

    if (json.data.code === '0') {
      that.list = [...that.list, ...json.data.list]
      that.page_total = json.data.page_total
      if (json.data.page_total === '0') {
        that.is_empty = true
      }
    } else {
      tip.error(json.data.msg)
    }

    this.showLoading = false
    this.$apply()

    if (keyword.length > 0) {
      const userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {}
      const openId = userSpecialInfo.openid
      const resJson = await api.addSearchKeyword({
        query: {
          openId: openId,
          keyword: keyword
        }
      })
      console.log(resJson)
    }
  }

  async clearUserKeywords () {
    const userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {}
    const openId = userSpecialInfo.openid
    const json = await api.clearSearchKeyword({
      query: {
        openId: openId
      }
    })

    // console.log(json)

    if (json.data.code === '0') {
      this.keywordhisList = []
    } else {
      tip.error(json.data.msg)
    }
    this.$apply()
  }

  methods = {
    doSearch (val) {
      this.list = []
      this.is_empty = false
      this.showLoading = true
      this.keyword = val
      this.doSearchGoods(val)
    },

    currentType (obj) {
      const name = obj.name
      const type = obj.type

      if (name === 'zhonghe') {
        this.sort = -1
      } else if (name === 'sale') {
        this.sort = 3
      } else if (name === 'price') {
        if (type === 'desc') {
          this.sort = 2
        } else if (type === 'asc') {
          this.sort = 1
        }
      } else if (name === 'sku') {
        this.skuval = type
      }

      this.list = []
      this.is_empty = false
      this.showLoading = true
      this.show = false
      this.doSearchGoods(this.keyword)
    },

    selHisKeyWord (e) {
      const id = e.currentTarget.dataset.id
      let hisKeyword = ''
      for (let i = 0; i < this.keywordhisList.length; i++) {
        this.keywordhisList[i].sel = 0
        if (id === this.keywordhisList[i].id) {
          hisKeyword = this.keywordhisList[i].keyword
          this.keywordhisList[i].sel = 1
        }
      }
      if (hisKeyword.length > 0) {
        this.keyword = hisKeyword
        this.doSearchGoods(hisKeyword)
      }
    },

    clearHis () {
      this.clearUserKeywords()
    },

    onShareAppMessage () {
      if (res.from === 'button') {
        console.log(res.target)
      }

      return {
        title: this.detail.name,
        path: '/pages/search?cateCode=' + this.cateCode + '&title=' + this.title,
        success: res => {},
        fail: error => {
          console.log(error)
        }
      }
    }
  }

  onReachBottom () {
    const that = this
    that.showLoading = true

    if (that.page_total > that.currentPage) {
      if (that.preventRepeatRequest) {
        return true
      }
      that.preventRepeatRequest = true
      that.currentPage++
      that.doSearchGoods('', that.currentPage)
      that.preventRepeatRequest = false
    } else {
      that.showLoading = false
    }
  }
}
</script>

<style lang="less">
  .history {
    padding: 20rpx 27rpx;
  }

  .doc {
    color: #999999;
    font-size: 26rpx;
  }

  .lable {
    margin-top: 20rpx;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    margin-left: -20rpx;
    .child {
      background: #dedede;
      padding: 10rpx 20rpx;
      border-radius: 300rpx;
      margin-left: 20rpx;
      font-size: 26rpx;
      margin-top: 5rpx;
      color: #000000;
    }
  }

  .btn_box {
    width: 377rpx;
    margin: 0 auto;
    padding-top: 88rpx;
    .button {
      color: #999999;
    }
  }

  .active {
    border: 1px solid #f23737;
    color: #f23737;
  }
</style>
