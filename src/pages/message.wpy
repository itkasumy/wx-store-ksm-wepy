<template>
  <view class="messages">
    <scroll-view scroll-y="true" bindscrolltolower="onReachBottom" class="swiper-item-box" style="height: {{winHeight}}rpx">
      <repeat for="{{list}}" key="index" index="index" item="item">
        <view class="list_block">
          <view class="list_item">
            <view class="list_header">
              <i class="iconfont icon-message"></i>
              <view class="header_title">
                <text class="time">{{item.title}}</text>
                <text class="doc">{{item.proundup}}</text>
              </view>
            </view>

            <view class="list_content">{{item.detail}}</view>

            <view class="list_footer">{{item.createTime}}</view>
          </view>
        </view>
      </repeat>
      <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
      <placeholder :show.sync="is_empty" message="暂无消息"></placeholder>
    </scroll-view>
  </view>
</template>

<script>
import wepy from 'wepy'
import tip from '../utils/tip'
import BottomLoadMore from '../components/common/bottomLoadMore'
import Placeholder from '../components/common/placeholder'
import { SYSTEM_INFO, USER_SPECICAL_INFO } from '../utils/constant'
import api from '../api'

export default class Messages extends wepy.page {
  config = {
    navigationBarTitleText: '我的消息'
  }

  components = {
    bottomLoadMore: BottomLoadMore,
    placeholder: Placeholder
  }

  data = {
    list: [],
    winHeight: 0,
    currentPage: 1,
    page_total: 0,
    showLoading: true,
    preventRepeatRequest: false,
    is_empty: false
  }

  async getUserMessage (currentPage, size) {
    const that = this
    const userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {}
    const openId = userSpecialInfo.openid
    const json = await api.messageInfo({
      query: {
        openId: openId,
        page: currentPage || 1,
        size: size || 10
      }
    })

    // console.log(json)

    if (json.data.code === '0') {
      that.list = [...that.list, ...json.data.list]
      that.page_total = json.data.page_total
      if (json.data.page_total === 0) {
        that.is_empty = true
      }
    } else {
      // tip.error(json.data.msg)
      tip.error('json.data.msg')
    }

    this.showLoading = true
    this.$apply()
  }

  onLoad () {
    this.list = []
    const systemInfo = wepy.getStorageSync(SYSTEM_INFO)
    this.winHeight = systemInfo.windowHeight
    this.getUserMessage()
  }

  onReachBottom () {
    const that = this
    this.showLoading = true
    if (this.page_total > this.currentPage) {
      if (that.preventRepeatRequest) {
        return true
      }
      that.preventRepeatRequest = true
      that.currentPage++
      that.getUserMessage(that.currentPage)
      that.preventRepeatRequest = false
    } else {
      that.showLoading = false
    }
  }
}
</script>

<style lang="less">
  .list_block {
    padding: 27rpx;
  }

  .list_item {
    padding: 0 28rpx;
    background: #ffffff;
    border-radius: 20rpx;
  }

  .list_header {
    display: flex;
    padding: 20rpx 0;
    align-items: center;
    border-bottom: 1px solid #e6e6e6;
    font-size: 28rpx;
    .time {
      color: #000000;
    }
    .doc {
      margin-left: 10rpxp;
      color: #000000;
    }
  }

  .list_content {
    padding-top: 23rpx;
    font-size: 26rpx;
    color: #f71e1e;
  }

  .list_footer {
    height: 70rpx;
    line-height: 70rpx;
    text-align: center;
    color: #999999;
    font-size: 22rpx;
  }
</style>
